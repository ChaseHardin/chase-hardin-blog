{"data":{"markdownRemark":{"html":"<p>Okay, this is our test.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> Xunit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> ReverseStringKata<span class=\"token punctuation\">.</span>Tests\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnitTest1</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fact</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Reverse__GivenString__ReturnsReverseOfString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> expected <span class=\"token operator\">=</span> <span class=\"token string\">\"Fighters Foo\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> provided <span class=\"token operator\">=</span> <span class=\"token string\">\"Foo Fighters\"</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">var</span> actual <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReverseString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span>provided<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To follow true TDD, we need to do the minimilisc thing to make it pass:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> ReverseStringKata\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReverseString</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Fighters Foo\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Test was updated</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Xunit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> ReverseStringKata<span class=\"token punctuation\">.</span>Tests\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReverseStringTests</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fact</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Reverse__GivenString__ReturnsReverseOfString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> reverseString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReverseString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> fooFightersReversed <span class=\"token operator\">=</span> <span class=\"token string\">\"Fighters Foo\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> jimiHendrixReversed <span class=\"token operator\">=</span> <span class=\"token string\">\"Hendrix Jimi\"</span><span class=\"token punctuation\">;</span>\n            \n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>reverseString<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Foo Fighters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fooFightersReversed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>reverseString<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jimi Hendrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> jimiHendrixReversed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Why do so Many People Fail The Reverse String Challenge?"}}},"pageContext":{"slug":"/reverse-string-challenge/"}}